// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id    String @unique @default(uuid()) // @unique means indexable
//   email String @unique
//   name  String

//   createdAt  DateTime     @default(now())
//   updatedAt  DateTime     @updatedAt()
//   LoginToken LoginToken[]
//   Post       Post[]
// }

// model LoginToken {
//   id        String   @unique @default(uuid())
//   createdAt DateTime @default(now())
//   user      User     @relation(fields: [userId], references: [id])

//   userId   String
//   redirect String @default("/")
// }

// model Post {
//   id    String @unique @default(uuid())
//   title String
//   body  String

//   user   User   @relation(fields: [userId], references: [id])
//   userId String

//   updatedAt DateTime @updatedAt()
//   createdAt DateTime @default(now())
// }

// * Shop Schemas -------------------
model Product {
  id Int @id @unique @default(autoincrement())

  price  Int @default(200)
  weight Int @default(0)

  type ProductTypes @default(WOOD)

  name        String
  description String
  slug        String         @unique
  mainImage   ProductImage?  @relation("main_image", fields: [mainImageId], references: [id])
  mainImageId Int?
  images      ProductImage[]

  countInStock     Int     @default(0)
  hasInfiniteStock Boolean @default(false)
  published        Boolean @default(true)

  crossSells Product[] @relation("cross_sells")
  relatedTo  Product[] @relation("cross_sells")

  updatedAt    DateTime       @default(now()) @updatedAt()
  createdAt    DateTime       @default(now())
  orderProduct orderProduct[]
}

enum ProductTypes {
  WOOD
  FURNITURE
}

model ProductImage {
  id           Int       @id @unique @default(autoincrement())
  url          String    @default("/images/placeholder-product-image.jpg")
  mainProducts Product[] @relation("main_image")
  productId    Int?
  Product      Product[]
}

model Order {
  id        Int     @id @unique @default(autoincrement())
  paymentId String? @unique @default(uuid())

  customerName        String
  customerEmail       String
  customerPhoneNumber String

  products              orderProduct[]
  deliveryTimeSlotStart String
  deliveryTimeSlotEnd   String
  deliveryPhoneNumber   String
  deliveryAddress       String

  totalPrice     Int
  totalQuantity  Int
  status         PaymentStatus  @default(PENDING)
  deliveryStatus DeliveryStatus @default(PENDING)
  paymentMethod  String

  updatedAt DateTime @default(now()) @updatedAt()
  createdAt DateTime @default(now())
}

enum PaymentStatus {
  PENDING
  PAID
  DELIVERED
  CANCELLED
  REFUNDED
  ARCHIVED
}

enum DeliveryStatus {
  PENDING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model orderProduct {
  id Int @id @unique @default(autoincrement())

  orderId Int
  order   Order @relation(fields: [orderId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  quantity Int
  price    Int

  updatedAt DateTime @default(now()) @updatedAt()
  createdAt DateTime @default(now())
}
